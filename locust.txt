echo $PATH

export PATH=$PATH:~/.local/bin


for permanently
echo 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc
source ~/.bashrc



	
locust -V


python -m locust -f path/to/your/locustfile.py --host=http://your-quarkus-app

locust -f test.py --host=http://localhost:9099/request

locust -f  test.py --headless --master --master-bind-host=http://localhost:9099/request  --master-bind-port=5557

locust -f test.py --headless --master --master-bind-host=localhost --master-bind-port=5557



podman run -d --net=host containersol/locust_exporter

locust -f test.py --headless --host=http://localhost:9099/request


locust -f pro.py --headless -u 10 -r 2 --host=http://localhost:9099/request --web-port=8089



 sudo podman  run -d --name locust-exporter --net=host -e LOCUST_EXPORTER_URI=http://192.168.1.140:8089 docker.io/containersol/locust_exporter
 
 
 by default it use
 locust -f locustfile.py --host=http://localhost
  specifies the default host for Locust, even though it's not directly used due to dynamic host loading from the Excel file
  
  
  prometheus query 
  locust_users

 
 
 dashboard id 20462
12081
12081


eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJTWVNURU1VU1IzIl0sImp0aSI6IjNhZDk3ZDQzLTc2MmUtNDJkOC05YmMzLWRkNjNiNGFlZTE1NSIsImlhdCI6IjE3MTk1MTk4MzIiLCJpc3MiOiJhdXRobWFuIiwidXNlcl9pZCI6IlNZU19VU1JfRVNCX0FHR1IiLCJpcF9hZGRyZXNzIjpudWxsLCJnZW9fbG9jYXRpb24iOiIiLCJjbGllbnRfaWQiOiJGSU5PVExSIiwibW1pZCI6bnVsbCwibWFwcGVkX3VzZXJfaWQiOiJTWVNfVVNSX0VTQl9BR0dSIiwiZnVsbF9uYW1lIjoiU1lTX1VTUl9FU0JfQUdHUiIsImJyYW5jaF9jb2RlIjoiOTAwMSIsImZpcnN0TG9naW5LaWxsZWQiOm51bGwsInN1YlVjbHMiOjB9.V7niZW1RbOaxWSz4vnIVBbcu6RD5Pd2KFs6_HRM4oI8





curl  -X POST   'http://localhost:8080/esb/getaccount/restrictions'   --header 'Accept: */*'   --header 'User-Agent: Thunder Client (https://www.thunderclient.com)'   --header 'Content-Type: application/json'   --header 'X-Auth-Token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJTWVNURU1VU1IzIl0sImp0aSI6IjNhZDk3ZDQzLTc2MmUtNDJkOC05YmMzLWRkNjNiNGFlZTE1NSIsImlhdCI6IjE3MTk1MTk4MzIiLCJpc3MiOiJhdXRobWFuIiwidXNlcl9pZCI6IlNZU19VU1JfRVNCX0FHR1IiLCJpcF9hZGRyZXNzIjpudWxsLCJnZW9fbG9jYXRpb24iOiIiLCJjbGllbnRfaWQiOiJGSU5PVExSIiwibW1pZCI6bnVsbCwibWFwcGVkX3VzZXJfaWQiOiJTWVNfVVNSX0VTQl9BR0dSIiwiZnVsbF9uYW1lIjoiU1lTX1VTUl9FU0JfQUdHUiIsImJyYW5jaF9jb2RlIjoiOTAwMSIsImZpcnN0TG9naW5LaWxsZWQiOm51bGwsInN1YlVjbHMiOjB9.V7niZW1RbOaxWSz4vnIVBbcu6RD5Pd2KFs6_HRM4oI8' --data-raw '{
  "accountno":"20017582704"
}'



curl.py is main for curl command testing 





























































from locust import HttpUser, task, between
from prometheus_client import start_http_server, Summary, Counter, generate_latest
import threading
import pandas as pd
import subprocess
import shlex

# Define Prometheus metrics
REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')
REQUEST_COUNT = Counter('request_count', 'Number of requests made')

class MyUser(HttpUser):
    wait_time = between(1, 3)

    def on_start(self):
        # Load dynamic values from Excel file
        self.df = pd.read_excel('curl.xlsx', engine='openpyxl')
        self.df.columns = self.df.columns.str.strip()  # Strip any leading/trailing spaces from column names
        print(f"Columns in Excel file: {self.df.columns.tolist()}")  # Print column names for debugging
        self.current_index = 0
        self.total_rows = len(self.df)
        print(f"Total rows in Excel file: {self.total_rows}")  # Print total number of rows for debugging

    @task
    @REQUEST_TIME.time()  # Measure the time of this task
    def my_task(self):
        if self.current_index >= self.total_rows:
            print(f"Resetting current_index from {self.current_index} to 0")  # Debugging line
            self.current_index = 0

        # Get current row data
        row = self.df.iloc[self.current_index]
        print(f"Current row data: {row}")  # Print current row data for debugging
        curl_command = row['curl_command']
        print(f"Executing curl command: {curl_command}")  # Print the curl command for debugging

        # Execute curl command
        try:
            # Split curl command into a list of arguments
            curl_args = shlex.split(curl_command)
            
            # Execute the curl command using subprocess
            response = subprocess.run(curl_args, capture_output=True)
            
            # Log response details
            print(f"Response status code: {response.returncode}")
            print(f"Response content: {response.stdout.decode('utf-8')}")
            
            REQUEST_COUNT.inc()  # Increment request count
        
        except Exception as e:
            print(f"Error executing curl command: {str(e)}")

        # Update index to the next row, loop back to start if at the end
        self.current_index = (self.current_index + 1) % self.total_rows

# Function to expose Prometheus metrics
def start_prometheus_server():
    start_http_server(9646)  # Start Prometheus metrics server on port 9646

    # Expose a /metrics endpoint that Prometheus expects
    while True:
        generate_latest()

# Start Locust load test and Prometheus metrics server
if __name__ == "__main__":
    # Start Prometheus metrics server in a separate thread
    threading.Thread(target=start_prometheus_server).start()

    # Start Locust load test
    from locust import main
    main.main()
    
    
    
    
    
    
    
    
    
    
    
    Curl.py
    from locust import HttpUser, task, between, events
from prometheus_client import start_http_server, Summary, Counter, generate_latest
import threading
import pandas as pd
import subprocess
import shlex
import time

# Define Prometheus metrics
REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')
REQUEST_COUNT = Counter('request_count', 'Number of requests made')

class MyUser(HttpUser):
    wait_time = between(1, 3)

    def on_start(self):
        # Load dynamic values from Excel file
        self.df = pd.read_excel('curl.xlsx', engine='openpyxl')
        self.df.columns = self.df.columns.str.strip()
        print(f"Columns in Excel file: {self.df.columns.tolist()}")
        self.current_index = 0
        self.total_rows = len(self.df)
        print(f"Total rows in Excel file: {self.total_rows}")

    @task
    @REQUEST_TIME.time()
    def my_task(self):
        if self.current_index >= self.total_rows:
            print(f"Resetting current_index from {self.current_index} to 0")
            self.current_index = 0

        row = self.df.iloc[self.current_index]
        print(f"Current row data: {row}")
        curl_command = row['curl_command']
        print(f"Executing curl command: {curl_command}")

        start_time = time.time()
        try:
            curl_args = shlex.split(curl_command)
            response = subprocess.run(curl_args, capture_output=True, timeout=30)
            
            response_time = int((time.time() - start_time) * 1000)
            response_length = len(response.stdout)

            if response.returncode == 0:
                events.request.fire(
                    request_type="curl",
                    name=curl_command[:50],  # Use first 50 chars of curl command as name
                    response_time=response_time,
                    response_length=response_length,
                    exception=None,
                )
                print(f"Response status code: {response.returncode}")
                print(f"Response content: {response.stdout.decode('utf-8')}")
            else:
                events.request.fire(
                    request_type="curl",
                    name=curl_command[:50],
                    response_time=response_time,
                    response_length=response_length,
                    exception=f"Curl command failed with return code {response.returncode}"
                )
                print(f"Curl command failed with return code: {response.returncode}")
                print(f"Error output: {response.stderr.decode('utf-8')}")

            REQUEST_COUNT.inc()

        except subprocess.TimeoutExpired:
            events.request.fire(
                request_type="curl",
                name=curl_command[:50],
                response_time=30000,  # 30 seconds timeout
                response_length=0,
                exception="Timeout"
            )
            print("Curl command timed out after 30 seconds")
        except Exception as e:
            events.request.fire(
                request_type="curl",
                name=curl_command[:50],
                response_time=int((time.time() - start_time) * 1000),
                response_length=0,
                exception=str(e)
            )
            print(f"Error executing curl command: {str(e)}")

        self.current_index = (self.current_index + 1) % self.total_rows

# Function to expose Prometheus metrics
def start_prometheus_server():
    start_http_server(9646)
    while True:
        generate_latest()

if __name__ == "__main__":
    threading.Thread(target=start_prometheus_server).start()
    from locust import main
    main.main(["-f", __file__, "--web-host", "localhost", "--web-port", "8089"])






perfect curl with return code 
from locust import HttpUser, task, between, events
from prometheus_client import start_http_server, Summary, Counter, generate_latest
import threading
import pandas as pd
import subprocess
import shlex
import time
import re

# Define Prometheus metrics
REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')
REQUEST_COUNT = Counter('request_count', 'Number of requests made')

def extract_endpoint(curl_command):
    match = re.search(r"'(https?://[^/]+(/[^/]+)+)", curl_command)
    if match:
        return match.group(1)
    return "unknown_endpoint"

class MyUser(HttpUser):
    wait_time = between(1, 3)

    def on_start(self):
        # Load dynamic values from Excel file
        self.df = pd.read_excel('curl.xlsx', engine='openpyxl')
        self.df.columns = self.df.columns.str.strip()
        print(f"Columns in Excel file: {self.df.columns.tolist()}")
        self.total_rows = len(self.df)
        print(f"Total rows in Excel file: {self.total_rows}")

    @task
    def execute_curls(self):
        for index, row in self.df.iterrows():
            self.execute_single_curl(row)

    @REQUEST_TIME.time()
    def execute_single_curl(self, row):
        curl_command = row['curl_command']
        print(f"Executing curl command: {curl_command}")

        start_time = time.time()
        try:
            curl_args = shlex.split(curl_command)
            response = subprocess.run(curl_args, capture_output=True, timeout=30)
            
            response_time = int((time.time() - start_time) * 1000)
            response_length = len(response.stdout)

            endpoint = extract_endpoint(curl_command)
            request_name = f"curl:{endpoint}"

            if response.returncode == 0:
                events.request.fire(
                    request_type="curl",
                    name=request_name,
                    response_time=response_time,
                    response_length=response_length,
                    exception=None,
                )
                print(f"Response status code: {response.returncode}")
                print(f"Response content: {response.stdout.decode('utf-8')}")
            else:
                events.request.fire(
                    request_type="curl",
                    name=request_name,
                    response_time=response_time,
                    response_length=response_length,
                    exception=f"Curl command failed with return code {response.returncode}"
                )
                print(f"Curl command failed with return code: {response.returncode}")
                print(f"Error output: {response.stderr.decode('utf-8')}")

            REQUEST_COUNT.inc()

        except subprocess.TimeoutExpired:
            events.request.fire(
                request_type="curl",
                name=request_name,
                response_time=30000,  # 30 seconds timeout
                response_length=0,
                exception="Timeout"
            )
            print("Curl command timed out after 30 seconds")
        except Exception as e:
            events.request.fire(
                request_type="curl",
                name=request_name,
                response_time=int((time.time() - start_time) * 1000),
                response_length=0,
                exception=str(e)
            )
            print(f"Error executing curl command: {str(e)}")

# Function to expose Prometheus metrics
def start_prometheus_server():
    start_http_server(9646)
    while True:
        generate_latest()

if __name__ == "__main__":
    threading.Thread(target=start_prometheus_server).start()
    from locust import main
    main.main(["-f", __file__, "--web-host", "localhost", "--web-port", "8089"])
    
    
    
     
perfect locust with service name

from locust import HttpUser, task, between, events
from prometheus_client import start_http_server, Summary, Counter, generate_latest
import threading
import pandas as pd
import subprocess
import shlex
import time
import re

# Define Prometheus metrics
REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')
REQUEST_COUNT = Counter('request_count', 'Number of requests made')

def extract_endpoint(curl_command):
    match = re.search(r"'(https?://[^/]+(/[^/]+)+)", curl_command)
    if match:
        return match.group(1)
    return "unknown_endpoint"

class MyUser(HttpUser):
    wait_time = between(1, 3)

    def on_start(self):
        # Load dynamic values from Excel file
        self.df = pd.read_excel('curl.xlsx', engine='openpyxl')
        self.df.columns = self.df.columns.str.strip()
        print(f"Columns in Excel file: {self.df.columns.tolist()}")
        self.total_rows = len(self.df)
        print(f"Total rows in Excel file: {self.total_rows}")

    @task
    def execute_curls(self):
        for index, row in self.df.iterrows():
            self.execute_single_curl(row)

    @REQUEST_TIME.time()
    def execute_single_curl(self, row):
        curl_command = row['curl_command']
        service_name = row['service_name']
        print(f"Executing curl command: {curl_command} for service: {service_name}")
        start_time = time.time()
        try:
            curl_args = shlex.split(curl_command)
            response = subprocess.run(curl_args, capture_output=True, timeout=30)
            
            response_time = int((time.time() - start_time) * 1000)
            response_length = len(response.stdout)
            endpoint = extract_endpoint(curl_command)
            request_name = f"{service_name}:{endpoint}"
            if response.returncode == 0 and response.stdout:
                events.request.fire(
                    request_type="curl",
                    name=request_name,
                    response_time=response_time,
                    response_length=response_length,
                    response=response,
                    context={},
                    exception=None,
                )
                print(f"Response status code: {response.returncode}")
                print(f"Response content: {response.stdout.decode('utf-8')}")
            else:
                events.request.fire(
                    request_type="curl",
                    name=request_name,
                    response_time=response_time,
                    response_length=0,
                    response=response,
                    context={},
                    exception=Exception(f"Curl command failed or returned empty response with return code {response.returncode}")
                )
                print(f"Curl command failed or returned empty response with return code: {response.returncode}")
                print(f"Error output: {response.stderr.decode('utf-8')}")
            REQUEST_COUNT.inc()
        except subprocess.TimeoutExpired:
            events.request.fire(
                request_type="curl",
                name=request_name,
                response_time=30000,  # 30 seconds timeout
                response_length=0,
                response=None,
                context={},
                exception=Exception("Timeout")
            )
            print("Curl command timed out after 30 seconds")
        except Exception as e:
            events.request.fire(
                request_type="curl",
                name=request_name,
                response_time=int((time.time() - start_time) * 1000),
                response_length=0,
                response=None,
                context={},
                exception=e
            )
            print(f"Error executing curl command: {str(e)}")

# Function to expose Prometheus metrics
def start_prometheus_server():
    start_http_server(9646)
    while True:
        generate_latest()

if __name__ == "__main__":
    threading.Thread(target=start_prometheus_server).start()
    from locust import main
    main.main(["-f", __file__, "--web-host", "localhost", "--web-port", "8089"])

































